
Merge(L,R,A)
{
{
nL = length(L);
nR = length(R);
i,j,k = 0;
}

while(i<nL && j<nR)
if(L[i]<=R[j])
{
A[k] = L[i];
k=k+1;
i = i+1;

}
else
{
A[k] = R[j];
k = k+1;
j = j+1;
}

while(i<nL) //to print the one part of array which is left
{
A[k] = L[i];
i=i+1;
k = k+1;
}

while(j<nR)
{
A[k] = R[j];
j = j+1;
k = k+1;
}
}

MergeSort(A)
{
n = length(A);
if(n<2)
    return;

mid = n/2;
left = arrayofsize(mid);
right = arrayofsize(n-mid);

for i=0 to mid -1
    left[i] = A[i];
for i=mid to n-1
    right[i-mid] = A[i];

MergeSort(left);
MergeSort(right);
Merge(L,R,A);
}
